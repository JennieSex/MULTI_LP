from vk.user_bot import dlp, ND
from time import time as timenow
from vk.user_bot.utils import find_mention_by_message, get_index
from vk.user_bot.service import vk_users, lp_failed, vk_lp_running
from longpoll.lp import send_to_lp
from database.billing_manager import catchers
from database.client import method

from .admin import check_admin


def _check_user_state(uid: int) -> str:
    if uid not in vk_users:
        return ('–ê –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–µ–Ω... –°–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –µ–º—É '
                '–Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å [randombotclub|–≤ –ª—Å –±–æ—Ç–∞] "–≤–∫–ª—é—á–∏"')
    if uid in lp_failed:
        reason = lp_failed[uid]['reason']
        if reason == 'tokenfail':
            reason = '—Ç–æ–∫–µ–Ω –∏–Ω–≤–∞–ª–∏–¥ üíî'
        return (
            f"üò≥ –ë–µ–¥–∞_–æ—á–∫–∞: {reason}"
            '' if not lp_failed.get('restart') else
            (f'–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ ' +
             str(round(lp_failed[uid]["restart"] - timenow())) +
             ' —Å–µ–∫.')
        )
    if send_to_lp('check', catchers[uid], uid=uid):
        return f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ–¥–µ–Ω –∏ –±–µ–≥–∞–µ—Ç –Ω–∞ {catchers[uid]+1}-–º –º–æ–¥—É–ª–µ!'
    return '‚ùì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±–µ–≥–∞–µ—Ç, –ø—Ä–∏—á–∏–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞...'


def _get_user_state(uid: int) -> str:
    if uid is None:
        return '‚ùó –ù–µ —É–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    if not method.is_user(uid):
        return 'üëÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'
    return _check_user_state(uid)


@dlp.register('check', '—á–µ–∫', receive=True)
def check_is_user(nd: ND):
    uid = find_mention_by_message(nd.msg, nd.vk)
    nd.msg_op(2, _get_user_state(uid), keep_forward_messages=1)


@dlp.register('checkall', '—á–µ–∫–≤—Å–µ—Ö', '–≥–ª–æ—á–µ–∫', receive=True)
@dlp.wrap_handler(check_admin)
def check_all_users(nd: ND):
    usrs_in = 0
    usrs_out = []
    deactivated = 0
    all_users = method.start()
    for uid in vk_users:
        if uid in vk_lp_running:
            usrs_in += 1
        else:
            usrs_out.append(uid)
    for uid in all_users:
        if uid not in vk_users:
            deactivated += 1
    for i, user in enumerate(usrs_out):
        if user not in lp_failed:
            reason = '–ø—Ä–∏—á–∏–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞'
        else:
            reason = lp_failed[user]['reason']
            if reason == 'failstart':
                reason = (
                    '–æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ' +
                    f'{round(lp_failed[user]["restart"] - timenow())} —Å.'
                )
            elif reason == 'tokenfail':
                reason = '—Ç–æ–∫–µ–Ω - –∏–Ω–≤–∞–ª–∏–¥'
        usrs_out[i] = f'vk.com/id{user} ({reason})'
    if get_index(nd.msg['args'], 0) == '–∫—Ä–∞—Ç–∫–æ':
        usrs_out = [str(len(usrs_out))]
    else:
        usrs_out[0] = '\n' + usrs_out[0]
    nd.msg_op(
        f'–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(all_users)}\n'
        f'–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {deactivated}\n'
        f'LP –∑–∞–ø—É—â–µ–Ω —É {usrs_in}\n'
        f"–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {'<br>'.join(usrs_out)}"
    )

@dlp.register('test', '—Ç–µ—Å—Ç', receive=True)
def test_user(nd: ND):
    uid = find_mention_by_message(nd.msg, nd.vk)
    try:
        VkApi(method.get_tokens(nd[3])['access_token'], raise_excepts=True).msg_op(1, owner_id, '–Ω–¥')
    except VkApiResponseException:
        vk.msg_op(2, nd[3], '‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–∫–µ–Ω', nd[1])
