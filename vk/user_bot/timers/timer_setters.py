import re
from typing import Tuple
from vk.user_bot import dlp, ND
from datetime import datetime
from vk.user_bot.utils import find_time, parse
from .timers import Timer, Cycle, get_timers, del_timer, get_cycles


@dlp.register('—Ü—Ç–∞–π–º–µ—Ä—ã')
def cycles_list(nd: ND):
    _list(nd, True, '‚è≥ –°–ø–∏—Å–æ–∫ —Ü–∏–∫–ª–æ—Ç–∞–π–º–µ—Ä–æ–≤:\n',
          '‚ùî –ù–∏ –æ–¥–∏–Ω —Ü–∏–∫–ª–æ—Ç–∞–π–º–µ—Ä –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')


@dlp.register('—Ç–∞–π–º–µ—Ä—ã')
def timer_list(nd: ND):
    _list(nd, False, '‚è≥ –°–ø–∏—Å–æ–∫ —Ç–∞–π–º–µ—Ä–æ–≤:\n',
          '‚ùî –ù–∏ –æ–¥–∏–Ω —Ç–∞–π–º–µ—Ä –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')


def _list(nd: ND, cycle: bool, *text: Tuple[str, str]):
    if cycle:
        timers, _ = get_cycles(nd.db.user_id)
    else:
        timers, _ = get_timers(nd.db.user_id)
    if timers:
        message = text[0] + timers
    else:
        message = text[1]
    nd.msg_op(2, message)


@dlp.register('-—Ü—Ç–∞–π–º–µ—Ä', receive=True)
def cycle_unset(nd: ND):
    _unset(nd, True, '‚ùóÔ∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ü–∏–∫–ª–æ—Ç–∞–π–º–µ—Ä–∞',
     '‚úÖ –¶–∏–∫–ª–æ—Ç–∞–π–º–µ—Ä #{} —É–¥–∞–ª–µ–Ω', '‚ùóÔ∏è –¶–∏–∫–ª–æ—Ç–∞–π–º–µ—Ä #{} –Ω–µ –Ω–∞–π–¥–µ–Ω')


@dlp.register('-—Ç–∞–π–º–µ—Ä', receive=True)
def timer_unset(nd: ND):
    _unset(nd, False, '‚ùóÔ∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–∞–π–º–µ—Ä–∞',
           '‚úÖ –¢–∞–π–º–µ—Ä #{} —É–¥–∞–ª–µ–Ω', '‚ùóÔ∏è –¢–∞–π–º–µ—Ä #{} –Ω–µ –Ω–∞–π–¥–µ–Ω')


def _unset(nd: ND, cycle: bool, *text: Tuple[str, str, str]):
    if not nd.msg['args']:
        return nd.msg_op(2, text[0])

    ident = re.findall(r'\d+', nd.msg['text'])
    if ident:
        ident = int(ident[0])
    else:
        return nd.msg_op(2, text[0])

    if del_timer(nd.db.user_id, ident, cycle):
        nd.msg_op(2, text[1].format(ident))
    else:
        return nd.msg_op(2, text[2].format(ident))


@dlp.register('—Ü—Ç–∞–π–º–µ—Ä', '+—Ü—Ç–∞–π–º–µ—Ä', receive=True)
def cycle_set(nd: ND):
    _set(nd, True,
    '‚ùó –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø–µ—Ä–∏–æ–¥, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ü–∏–∫–ª–æ—Ç–∞–π–º–µ—Ä')


@dlp.register('—Ç–∞–π–º–µ—Ä', '+—Ç–∞–π–º–µ—Ä', receive=True)
def timer_set(nd: ND):
    _set(nd, False,
         '‚ùó –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø–µ—Ä–∏–æ–¥, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–∞–π–º–µ—Ä')


def _set(nd: ND, cycle: bool, *text: Tuple[str, str, str]):
    delay = find_time(' '.join(nd.msg['args']))

    if not delay:
        return nd.msg_op(2, text[0])

    if cycle:
        _, count = get_cycles(nd.db.user_id)
    else:
        _, count = get_timers(nd.db.user_id)
    if count > 10:
        nd.msg_op(2, '‚ùó –í–æ–∑–º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–∫—Å–∏–º—É–º 10 —Ç–∞–π–º–µ—Ä–æ–≤')

    prefix = nd.db.settings_get().prefix
    if nd.msg['payload'].startswith(prefix):
        nd.msg['payload'] = nd.msg['payload'].replace(prefix, '', 1)

    target_msg = parse({"text": nd.msg['payload']}, cut_prefix=False)

    if target_msg['command'] not in dlp.commands_list:
        args = [target_msg['command']]
        args.extend(target_msg['args'])
        target_msg['args'] = args
        target_msg['command'] = '–ø–æ–≤—Ç–æ—Ä–∏'

    if target_msg['command'] in dlp.receive_message:
        target_msg.update({'attachments': nd.msg['attachments'],
                           'reply': nd.msg['reply'],
                           'fwd': nd.msg['fwd']})

  #  if target_msg['command'] != '–ø–æ–≤—Ç–æ—Ä–∏':
 #       return nd.msg_op(2, '–æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ —Ü–µ–ª—è—Ö –ø–æ–≤—ã—à–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏')

    if cycle:
        Cycle(nd, target_msg, delay)
    else:
        Timer(nd, target_msg, delay)

    if delay > 15768000:
        return nd.msg_op(2, 'ü§® –ù—É —Ç—ã –∑–∞–ø—Ä–æ—Å –¥–æ –ø–æ–ª—É–≥–æ–¥–∞-—Ç–æ –æ–≥—Ä–∞–Ω–∏—á—å, —á–µ–ª')

    time = datetime.fromtimestamp(datetime.now().timestamp() + delay)
    if cycle:
        nd.msg_op(2, f'–ö–æ–º–∞–Ω–¥–∞ "{target_msg["command"]}" —Å—Ä–∞–±–æ—Ç–∞–µ—Ç ' +
                  time.strftime("%d.%m –≤ %H:%M:%S") +
                  f' –∏ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ {delay} —Å–µ–∫.')
    else:
        nd.msg_op(2, f'–ö–æ–º–∞–Ω–¥–∞ "{target_msg["command"]}" —Å—Ä–∞–±–æ—Ç–∞–µ—Ç ' +
                  time.strftime("%d.%m –≤ %H:%M:%S"))
