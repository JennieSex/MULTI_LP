import json
import re
import time
import random
from time import sleep
from urllib.parse import quote_plus

from database.client import method
from database.driver import owner_id
from lib.microvk import VkApi, VkApiResponseException
from vk import user_bot
from vk.user_bot import ND, dlp
from vk.user_bot.calc import (CalcError, ExponentError, UnpairedBrackets,
                              ValueTooBig, evaluate)
from vk.user_bot.utils import (att_parse, digger, execme,
                               find_mention_by_message)


@dlp.register('–æ–ø—Ä–æ—Å', receive=True)
def pollcreate(nd: ND):
    answers = nd.msg['payload'].split('\n')
    if not answers:
        nd.msg_op(2, '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ (—Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)')
        return
    if len(answers) > 10:
        answers = answers[:10]
        warning = '‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ - 10'
    else:
        warning = ''
    poll = nd.vk('polls.create', question=" ".join(nd.msg['args']),
                 add_answers=json.dumps(answers, ensure_ascii=False))
    nd.msg_op(2, warning, attachment=f"poll{poll['owner_id']}_{poll['id']}")


@dlp.register('—Å–∫—Ä–∏–Ω')
def screen_take(nd):
    nd.vk.msg_op(3, msg_id=nd[1])
    execme('return API.messages.sendService({peer_id:%s,action_type:"chat_screenshot",random_id:0});' % nd[3], nd.db)  # noqa


@dlp.register('–∫–æ–º–∞–Ω–¥—ã', '–∫–º–¥')
def cmd_article(nd):
    nd.msg_op(2, 'vk.com/@rbcguide-overview', keep_forward_messages=1)


@dlp.register('–∫–æ–ª–æ–∫–æ–ª—å—á–∏–∫', receive=True)
def click_bell(nd):
    if nd.msg['reply']:
        push = f"[id{nd.msg['reply']['from_id']}|–ù–∞–∂–∏–º–∞–π] "
    else:
        push = '–ù–∞–∂–∏–º–∞–π '
    nd.msg_op(2, push + '–Ω–∞ –∫–æ–ª–æ–∫–æ–ª—å—á–∏–∫ [club176952405|&#128276;]',
              keep_forward_messages=1)


@dlp.register('–±–∞–ª–∞–Ω—Å')
def balance_check(nd):
    nd.msg_op(2, f'–£ –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ {round(method.billing_get_balance(nd.db.user_id), 1)} üé± (–±–∏–ª—å—è—Ä–¥–Ω—ã–π —à–∞—Ä –≤–æ—Å—å–º–µ—Ä–∫–∞)')


@dlp.register('–∞—Ç—Ç–∞—á', receive=True)
def attach_send(nd):
    nd.msg_op(1, attachment=','.join(nd.msg['args']))


@dlp.register('—Å–ø–∞–º', receive=True)
def spam(nd: ND):
    count = 1
    delay = 0.5
    if nd.msg['args'] is not None:
        if nd.msg['args'][0] == '–∫–∞–ø—á–∞':
            count = 100
        else:
            count = int(nd.msg['args'][0])
        if len(nd.msg['args']) > 1:
            delay = float(nd.msg['args'][1])
    if delay * count > 120 and nd.db.user_id != owner_id and delay > 4:
        nd.msg_op(2, '—ç—ç, –Ω–µ, –∏–¥–∏ –Ω–∞—Ö–µ—Ä, —è –Ω–µ –±—É–¥—É —Ç–∞–∫ –¥–æ–ª–≥–æ —ç—Ç–æ –¥–µ–ª–∞—Ç—å, –º–∏–Ω—É—Ç—ã –¥–≤–µ –º–∞–∫—Å–∏–º—É–º')
        return "ok"
    if nd.msg['payload']:
        if (nd.msg['payload'].lower().startswith(nd.db.settings_get().prefix) or
            nd.msg['payload'].startswith("–Ω–¥") or nd.msg['payload'].startswith("!!")):
            nd.msg_op(2, '–∫–æ–º–∞–Ω–¥—ã –Ω–µ–ª—å–∑—è')
            return "ok"
        for _ in range(count):
            nd.msg_op(1, nd.msg['payload'])
            time.sleep(delay)
    else:
        for i in range(count):
            nd.msg_op(1, f'spamming {i+1}/{count}')
            time.sleep(delay)
    return "ok"


@dlp.register('msginfo', '–º—Å–≥–∏–Ω—Ñ–æ', '—Å–º—Å–∏–Ω—Ñ–æ', receive=True)
def msg_info(nd):
    if nd.msg['reply']:
        nd.msg['raw'] = nd.vk(
            'messages.getById', message_ids=nd.msg['reply']['id']
        )['items'][0]
    data = json.dumps(nd.msg['raw'], indent=4, ensure_ascii=False)
    nd.msg_op(2, data.replace('    ', '·Ö†'))  # –≤—Ç–æ—Ä–æ–π —Å–∏–º–≤–æ–ª –≤ –∑–∞–º–µ–Ω–µ - –ø—É—Å—Ç–æ–π


@dlp.register('–∫—Å–º—Å', receive=True)
def tosms(nd):
    if nd[3] < 2000000000:
        nd.vk.msg_op(2, nd[3], '‚ùó –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –õ–°', msg_id=nd[1])
        return "ok"
    msg = (nd.vk('messages.getByConversationMessageId', peer_id=nd[3],
           conversation_message_ids=re.search(r'\d+', nd[5])[0])['items'])
    if msg:
        if msg[0].get('action'):
            nd.vk.msg_op(2, nd[3], '–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ - –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–µ –º–æ–≥—É –ø–µ—Ä–µ—Å–ª–∞—Ç—å', msg_id=nd[1])  # noqa
        else:
            nd.msg_op(1, nd.msg['payload'] or '–í–æ—Ç –µ–Ω—Ç–∞:',
                      reply_to=msg[0]['id'], delete_id=nd[1])
    else:
        nd.msg_op(2, '‚ùó –í–ö –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç')
    return "ok"


@dlp.register('–Ω–∞—á–∞–ª–æ')
def first_message(nd):
    for msg in nd.vk('messages.getHistory', peer_id=nd[3],
                     rev=1, count=200)['items']:
        if msg.get('action'):
            continue
        else:
            break
    nd.msg_op(1, '‚òùüèª –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–∏–∞–ª–æ–≥–µ...',
              delete_id=nd[1], reply_to=msg['id'])  # type: ignore


@dlp.register('cc', '—Å—Å', receive=True)
def link_shortener(nd):
    link = nd.msg['args'][0] if nd.msg['args'] else nd.msg['payload']
    try:
        shortened = nd.vk('utils.getShortLink', url=link)
        nd.msg_op(2, shortened['short_url'].replace('https://', ''))
    except VkApiResponseException:
        nd.msg_op(2, '‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏')


@dlp.register('–ø–æ–≤—Ç–æ—Ä–∏', '–Ω–∞–ø–∏—à–∏', receive=True)
def repeat(nd):
    nd.msg_op(1, ' '.join(nd.msg['args']) + '\n' + nd.msg['payload'],
              attachment=','.join(nd.msg['attachments']))


@dlp.register('lmgtfy', receive=True)
def lmgtfy(nd: ND):
    request = ' '.join(nd.msg['args']) or nd.msg['payload']
    if not request:
        return nd.msg_op(2, '‚ùó –£–∫–∞–∑–∞–Ω –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å')
    nd.msg_op(2, f'–°–º–æ—Ç—Ä–∏, —á—Ç–æ –Ω–∞—à–µ–ª:\nhttps://lmgtfy.app/?q={quote_plus(request)}')  # noqa


@dlp.register('—Ç–º', receive=True)
def add_trademark(nd):
    nd.msg_op(2, ' '.join(nd.msg['args'])+'‚Ñ¢',
              attachment=','.join(nd.msg['attachments']))


@dlp.register('dig', '–¥–∏–≥', receive=True)
def dig_attachments(nd: ND):
    if nd.msg['reply']:
        sleep(0.5)
        nd.msg['raw'] = nd.vk(
            'messages.getById', message_ids=nd.msg['reply']['id']
        )['items'][0]
    atts = digger(nd.msg['raw'])
    if atts == []:
        return nd.msg_op(2, 'üôà –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
    for att in att_parse(atts):
        nd.msg_op(1, attachment=att)
        sleep(1)


@dlp.register('—Ç–æ–∫–µ–Ω—ã')
def check_tokens(nd):
    me_token = method.get_tokens(nd.db.user_id)['me_token']
    try:
        VkApi(me_token, raise_excepts=True).exe('return 1;')
    except VkApiResponseException:
        me_token = False
    msg = ('–û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–∫–µ–Ω –≤ –ø–æ—Ä—è–¥–∫–µ, —Ä–∞–∑ —ç—Ç–æ —á–∏—Ç–∞–µ—à—å\n'
           '–¢–æ–∫–µ–Ω VkMe ' +
           ('–≤ –ø–æ—Ä—è–¥–∫–µ' if me_token else '–ø–æ—à–µ–ª –ø–æ –ø–∏–∑–¥–µ'))  # type: ignore
    nd.msg_op(2, msg)


@dlp.register('—Å—Ç–∞—Ç—É—Å', receive=True)
def status_set(nd):
    if not nd.msg['payload']:
        status = " ".join(nd.msg['args'])
    else:
        status = nd.msg['payload']
    if not status:
        return nd.msg_op(2, 'ü§∑üèº‚Äç‚ôÄÔ∏è –ù–µ–æ–±—Ö–æ–¥–∏–º —Ç–µ–∫—Å—Ç')
    try:
        nd.vk("status.set", text=status)
        nd.msg_op(2, '‚úÖ –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    except VkApiResponseException:
        nd.msg_op(2, '‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞')


@dlp.register('—Ä–µ—à–∏', receive=True)
def calc(nd: ND):
    if not nd.msg['payload']:
        text = " ".join(nd.msg['args'])
    else:
        text = nd.msg['payload'].split('\n')[0]
    if not text:
        return nd.msg_op(2, 'ü§î –ê —á–µ —Ä–µ—à–∞—Ç—å-—Ç–æ?')
    try:
        msg = evaluate(text.replace(',', '.'))
    except CalcError as e:
        if type(e) == ValueTooBig:
            msg = '‚ùóÔ∏è –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ'
        elif type(e) == UnpairedBrackets:
            msg = '‚ùóÔ∏è –ù–µ–ø–∞—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏'
        elif type(e) == ExponentError:
            msg = '‚ùóÔ∏è –í–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é —Å—Ç–µ–ø–µ–Ω—å'
        else:
            msg = '‚ùóÔ∏è –î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å'
        msg += '\n–í—ã—Ä–∞–∂–µ–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ' + e.sentence
    nd.delete_and_send(msg)


@dlp.register('–ø—É—à', '–ø—É—à–Ω—É—Ç—å', receive=True)
def ment_user(nd: ND):
    uid = find_mention_by_message(nd.msg, nd.vk)
    if uid is None:
        uid = nd.db.user_id
    if not nd.msg['payload']:
        return nd.msg_op(2, '‚ö† –¢–µ–∫—Å—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏')
    nd.msg_op(2, f"@id{uid}({nd.msg['payload']})")


@dlp.register('–±—É–ª—ã–≥–æ–≥–µ–Ω', '–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –±—É–ª—ã–∂–Ω–∏–∫–∞')
def stone_generator(nd: ND):
    msg = ''
    while True:
        msg += 'üóø'
        nd.msg_op(2, msg)
        sleep(1)


@dlp.register('—Å–±—Ä–æ—Å —É–≤–µ–¥–æ–≤')
def reset_notifications(nd: ND):
    nd.vk('notifications.markAsViewed')
    nd.msg_op(3)


@dlp.register('–≤—ã–±–µ—Ä–∏')
def choose(nd: ND):
    text = nd.msg['payload'] or ' '.join(nd.msg['args'])
    nd.msg_op(1, random.choice(text.split('–∏–ª–∏')), reply_to=nd[1])
